Разработка прототипа бекенд-приложения

Приложение должно быть разработано как REST на Java 8 с использованием Spring Framework. Выполняться на сервере приложений Tomcat 8. Для сборки используем Maven. Структура приложения должна быть разбита по соответствующим слоям:
•	DAO
•	Services
•	Controllers
•	Filters

Для работы с базой данных необходимо подключить Hibernate. Для работы с сущностями можно использовать как SessionFactory так и EntityManagerFactory. Возможно использование любой базы данных. Настройки подключения необходимо вынести в отдельный ресурс.

В проекте используем сущности:

User - пользователь:
•	id
•	userName
•	passWord
•	isActive (активность)
•	roles (список ролей)

	Role - роль:
•	id
•	Name

В контроллеры User-а и Role необходимо вынести методы CRUD доступ к сущности (приватные). Контроллеры должен принимать данные в формате JSON и конвертировать в объект и наоборот.

Для доступа к контроллерам необходима авторизация. Авторизация должна быть проведена через отдельный метод контроллера (публичный) с выдачей ключа доступа (token-а). Алгоритм генерации - любой удобный.

Для контроля доступа к приватным и публичным методам необходимо использовать Spring Security. Для публичных методов необходимо реализовать фильтр Spring Security. Фильтр должен обрабатывать приватные запросы на предмет наличия и валидации ключа доступа (token-а). Ключ может быть передан:
•	в адресной строке с параметром token
•	в шапке запроса HTTP (Header) как token
•	в cookies запроса
Если фильтр не обнаруживает или ключ не валидный - возвращение статуса HTTP 401 (не авторизирован)

В итоге бекенд должен отвечать на следующие запросы:
•	авторизация (получение ключа token-a)
•	получить список пользователей /добавить/удалить/изменить
•	получить список ролей /добавить/удалить/изменить

Классы приложения необходимо “обернуть” модульными тестами с использованием JUnit или любого другого другого фреймворка.

Для теста запросов можно использовать любой клиент, например Advanced Rest Client для Chrome или другой.

В коде приложения нужно избегать вызова классов приложения напрямую. Для этих целей необходимо использовать интерфейсы. Реализацию интерфейса должен подбирать Spring из пакетов, которые отмечены как autoscan.

Исходники необходимо разместить на github или другом публичном аккаунте для проверки.

